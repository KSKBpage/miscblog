################################################
#               Variable header                #
################################################

define OWNAS =  4242421817;
define OWNIP =  172.22.77.33;
define OWNIPv6 = fd28:cb8f:4c92::33;
define LocalNET = 172.22.77.32/30;
define LocalNETv6 = fd28:cb8f:4c92::/64;
define OWNNET = 172.22.77.32/28;
define OWNNETv6 = fd28:cb8f:4c92::/48;
define OWNNETSET = [172.22.77.32/28+];
define OWNNETSETv6 = [fd28:cb8f:4c92::/48+];

################################################
#                 Header end                   #
################################################

router id OWNIP;

protocol device {
    scan time 10;
}

/*
 *  Utility functions
 */

function is_self_net() {
  return net ~ OWNNETSET;
}

function is_self_net_v6() {
  return net ~ OWNNETSETv6;
}

function is_valid_network() {
  if (21817, 11111) ~ bgp_community then return false;
  bgp_community.delete([(21817, *)]);  # Delete all my communities while in/export
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16{16,32}, # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

function is_valid_network_v6() {
  if (21817, 11111) ~ bgp_community then return false;
  bgp_community.delete([(21817, *)]);  # Delete all my communities while in/export
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static {
    roa4 { table dn42_roa; };
    include "/etc/bird/roa_dn42.conf";
};

protocol static {
    roa6 { table dn42_roa_v6; };
    include "/etc/bird/roa_dn42_v6.conf";
};

protocol kernel {
    scan time 20;

    ipv4 {
        import none;
        export filter {
            krt_prefsrc = OWNIP;
            if source = RTS_STATIC then reject;
            if (21817, 11111) ~ bgp_community then accept;
            if is_self_net() then reject;
            accept;
        };
    };
}

protocol kernel {
    scan time 20;

    ipv6 {
        import none;
        export filter {
            krt_prefsrc = OWNIPv6;
            if source = RTS_STATIC then reject;
            if (21817, 11111) ~ bgp_community then accept;
            if is_self_net_v6() then reject;
            accept;
        };
    };
};

protocol static {
    route OWNNET reject;
    route LocalNET reject { bgp_community.add( (65535, 65282)); bgp_community.add( (21817, 11111));};

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;
    route LocalNETv6 reject { bgp_community.add( (65535, 65282)); bgp_community.add( (21817, 11111)); };

    ipv6 {
        import all;
        export none;
    };
}

template bgp dnpeers {
    local as OWNAS;
    path metric 1;

    ipv4 {
        extended next hop on;
        import filter {
          if is_valid_network() && !is_self_net() then {
            if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed from ",bgp_path.first , " ifname:", ifname ," for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };

        export filter { if is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };

    ipv6 {
        import filter {
          if is_valid_network_v6() && !is_self_net_v6() then {
            if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
              print "[dn42] ROA check failed from ",bgp_path.first , " ifname:", ifname ," for ", net, " ASN ", bgp_path.last;
              reject;
            } else accept;
          } else reject;
        };
        export filter { if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
}

template bgp dnnodes {
  local as OWNAS;
  path metric on;
  med metric on;
  direct;
  enable extended messages on;
  ipv4 {
    next hop self yes;
    extended next hop on;
    import all;
    export all;
  };
  ipv6 {
    next hop self yes;
    import all;
    export all;
  };
};


include "/etc/bird/nodes/*.conf";
include "/etc/bird/peers/*.conf";
